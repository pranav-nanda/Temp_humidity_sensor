#include "r_cg_macrodriver.h"
#include "r_cg_cgc.h"
#include "r_cg_port.h"
#include "r_cg_intp.h"
/* Start user code for include. Do not edit comment generated here */
#include"LCD.h"
#include <math.h>
#include <stdio.h>
#include <string.h>
/* End user code. Do not edit comment generated here */
#include "r_cg_userdefine.h"

/***********************************************************************************************************************
Global variables and functions
***********************************************************************************************************************/
/* Start user code for global. Do not edit comment generated here */
void DispImage(unsigned char *Adata);
char lcdBuf[30];
char gSendBuf[250];

void doprocessSMF(unsigned char *aSMF);
int sendSMF(char* aFrame);
void Display_Msg_1stFont1(char* aMsg);

void my_pic(const unsigned char (*pic_data)[128]);
char* rowWiseDataPtr;

unsigned char send_flag;
unsigned char rec_flag;
unsigned char send_flag;
unsigned char rec_flag;
unsigned char tx_buff[10];
unsigned char Rx_buff[10];
unsigned int Humidity,Temperature;
unsigned int Humidity_per,Temperature_per;
unsigned int d,ab;
unsigned char temp;

unsigned char temp1[20];
unsigned char temp2[20];
unsigned char base =2;
unsigned char power = 14;
unsigned int result;
int flag,flag1,flag2;
/* End user code. Do not edit comment generated here */

static void R_MAIN_UserInit(void);
/***********************************************************************************************************************
* Function Name: main
* Description  : This function implements main function.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void main(void)
{
    R_MAIN_UserInit();
    /* Start user code. Do not edit comment generated here */
    R_INTC3_Start();
      R_INTC0_Start();
      R_INTC4_Start();
    
        P1.7=1;
     
	RST = 1;
	CSB = 1;
	A0 = 1;
	SCL = 1;
	SDA = 1;

	RST = 1;
	RST = 0;

	CSB = 1;
	CSB = 0;

	A0 = 1;
	A0 = 0;

	SCL = 1;
	SCL = 0;

	SDA = 1;
	SDA = 0;

	RST = 0;
	CSB = 0;
	A0 = 0;
	SCL = 0;
	SDA = 0;

	RST = 1; 
	CSB = 0;
	SDA = 1;
	SCL = 1;
	LCD_INIT();
	LCD_CLEAR();

	delay(200);
	
	delay(200); 
	
	LCD_SET_PAGE(PAGE4,0);
	/*Display_Msg_2ndFont1("   SMET  ");
	delay(1000);	
	LCD_SET_PAGE(PAGE7,0);
	Display_Msg_1stFont1("      Thank You       ");
	delay(1000); 
	
	LCD_SET_PAGE(PAGE8,0);
	Display_Msg_1stFont1("      Thank You       "); 
	delay(1000); */
	
	
    
    while (1U)
    {
      if(flag){ 
        LCD_SET_PAGE(PAGE4,0);
	Display_Msg_1stFont1("key 2"); 
	flag=0; } 
       if(flag1){ 
        LCD_SET_PAGE(PAGE5,0);
	Display_Msg_1stFont1("key 1"); 
	flag1=0; } 
        if(flag2){ 
        LCD_SET_PAGE(PAGE6,0);
	Display_Msg_1stFont1("key 3"); 
	flag2=0; } 
	/*R_IICA0_Master_Send(0x88,tx_buff,1,100);
	while(send_flag==0);
	send_flag=0;
	for(d=0;d<=1000;d++)
	for(ab=0;ab<=1000;ab++);
	R_IICA0_Master_Receive(0x88, Rx_buff,4,100);
	while(rec_flag==0);
	for(d=0;d<=1000;d++);
	rec_flag=0;


	Rx_buff[1] &= 0x3f;
	Humidity = Rx_buff[1];
	Humidity = Humidity<<8;
	Humidity |= Rx_buff[0]; 

	Temperature = Rx_buff[3];
	Temperature = Temperature<<8;
	Temperature |= (Rx_buff[2]>>2); 

	Humidity_per = Humidity;
	Temperature_per = Temperature;
	result = (pow(base,power) -1);

	Humidity_per = Humidity_per/result;
	Humidity_per = Humidity_per * 100;


	Temperature_per = Temperature_per/result;
	Temperature_per = Temperature_per * 165;
	Temperature_per = Temperature_per - 40;

	sprintf(temp1,"%s : %d ","Humidity",Humidity);
	sprintf(temp2,"%s : %d ","Temperature",Temperature);
	LCD_CLEAR1(); */

	NOP();
	NOP();

	//my_pic(sm_logo); 
//	delay(6000);
//	delay(6000);
//	delay(6000);
//	delay(6000);
//	LCD_CLEAR();
	//Display_Msg_1stFont1(temp1);
//	delay(1000);
	//LCD_SET_PAGE(PAGE2,0);
	//Display_Msg_1stFont1(temp2);
	//Display_Msg_2ndFont1(temp2);
//	delay(1000); 

	


/*
temp =0x3f;
Rx_buff[0] =  temp & Rx_buff[0];
Humidity  = Rx_buff[0];
Humidity =  Humidity<<8;
Humidity =  Humidity | Rx_buff[1];

Temperature = Rx_buff[2];
Temperature = Temperature<<8;
Temperature = Temperature |Rx_buff[3];
Temperature = Temperature>>2;
 //********************Percentage Calculation***************
*/


	
   
    }
    /* End user code. Do not edit comment generated here */
}
/***********************************************************************************************************************
* Function Name: R_MAIN_UserInit
* Description  : This function adds user code before implementing main function.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
static void R_MAIN_UserInit(void)
{
    /* Start user code. Do not edit comment generated here */
    EI();
    /* End user code. Do not edit comment generated here */
}

/* Start user code for adding. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */





CODE TO DISPLAY ON LCD IN REAL TIME


#include "r_cg_macrodriver.h"
#include "r_cg_port.h"
#include "LCD.h"
#include "r_cg_userdefine.h"
extern const unsigned char ALPHA[95][6];
unsigned char PAGE,COL;

union{
	unsigned char byte;
	struct{
			char b0:1;
			char b1:1;
			char b2:1;
			char b3:1;
			char b4:1;
			char b5:1;
			char b6:1;
			char b7:1;

		  } bite;

}vchar,a,b;


void LCD_INIT(void)
{
	RST = 1; 	
	LCD_WRITE_CMD(0xE2);		// S/W RESWT
	LCD_WRITE_CMD(0xA0);		// ADC select		
	LCD_WRITE_CMD(0xC0);  		// SHL Normal
	LCD_WRITE_CMD(0xC8);  		// SHL Normal	
	LCD_WRITE_CMD(0xA3);		// LCD bias 
	LCD_WRITE_CMD(0x2F);		// Power control 
	LCD_WRITE_CMD(0x27);		// Rb/Ra Ratio 
 	LCD_WRITE_CMD(0x23);		// reg resistor select	
	LCD_WRITE_CMD(0x40);		// Initial display line 40 
	LCD_WRITE_CMD(0xA4);		// Normal display	
	LCD_WRITE_CMD(0xA6);		//A7	
	LCD_WRITE_CMD(0x81);		// Ref vg select mode	
	LCD_WRITE_CMD(0x0F);		// CONTRAST	
	LCD_WRITE_CMD(0x38);		// Ref vg reg select
	LCD_WRITE_CMD(0xA5);		//all  point Display  ON
	LCD_WRITE_CMD(0xA4);		//Normal  Display mode ON
	LCD_WRITE_CMD(0xAF);		// Display ON
	LCD_WRITE_CMD(0XB0);		// Set page address 
	LCD_WRITE_CMD(0x10);		// Set coloumn addr  MSB 
	LCD_WRITE_CMD(0x00);		// Set coloumn addr LSB
}


void LCD_WRITE_CMD(unsigned char comm)
{
	unsigned char i, maskdata = 0x80;
	A0 = 0;
	delay(2);
	CSB = 0;
	delay(2);
	for(i= 0;i<8;i++)
	{	
		SCL = 0;		
		if(comm & maskdata)
			SDA = 1;
		else
			SDA = 0;	
		maskdata >>= 1;
		SCL = 1;	
		delay(2);
	}	
	A0 = 1;
	delay(2);
	
}

void LCD_WRITE_DATA(unsigned char data)
{
	unsigned char i, maskdata = 0x80;
	A0 = 1;
	delay(2);
	CSB = 0;
	delay(2);
	for(i= 0;i<8;i++)
	{		       
		SCL = 0;
		if(data & maskdata)
			SDA = 1;
		else
			SDA = 0;	
		maskdata >>= 1;	    
		SCL =1;  
		delay(2);
	}
	
	A0 = 0; 
	delay(2);
}


void LCD_SET_PAGE(unsigned char page,unsigned char col)
{
	unsigned char msb,lsb;
	msb		=	(((col & 0xF0) >> 4)| 0x10);
	lsb		=	(col & 0x0F) ;
	LCD_WRITE_CMD(page);
	LCD_WRITE_CMD(msb);
	LCD_WRITE_CMD(lsb);
	PAGE = page;
	COL = col;
}

void LCD_CLEAR(void)
{
	unsigned char i = 0,j = 0;
	
	LCD_SET_PAGE(PAGE1,0);	// initial page, col
		
	for(i = 0; i < 8; i ++)
	{
		for(j = 0; j < 128; j ++)
		LCD_WRITE_DATA(0x00);
	
		LCD_SET_PAGE(PAGE1 + i + 1 , 0);	// increment page
	}
	LCD_SET_PAGE(PAGE1,0);		// initial page,col
}

void LCD_CLEAR1(void)
{
	unsigned char i = 0,j = 0;
	
	LCD_SET_PAGE(PAGE1,0);	// initial page, col
		
	for(i = 0; i < 1; i ++)
	{
		for(j = 0; j < 1; j ++)
		LCD_WRITE_DATA(0x00);
	
		LCD_SET_PAGE(PAGE1 + i + 1 , 0);	// increment page
	}
	LCD_SET_PAGE(PAGE1,0);		// initial page,col
}

void LCD_PRINT_FONT1(unsigned char data)
{
	unsigned char i,j,index;
	static unsigned char PAGE_var	= PAGE1;
	static unsigned char COL_var	= COL1;
	
	index	= data - 32;	
	LCD_PAGE_COL_CHECK_FONT1();
	
	for(i = 0; i < 6; i++)
	LCD_WRITE_DATA(ALPHA[index][i]);
	COL += 1;
	

}

void LCD_PAGE_COL_CHECK_FONT1(void)
{
	
	if (COL >= 22)
	{
		PAGE += 1;
		if(PAGE		>=	PAGE8 + 1)
			LCD_CLEAR();

		COL 	=	COL1;

		LCD_SET_PAGE(PAGE,COL);		// initial page,col
	}
}


void delay(unsigned int i)
{
	unsigned int j,k;
	for(k = 0;k < 50;k++)
	for(j = 0;j< i;j++);
}

void Display_Msg_2ndFont1(char* aMsg)
{
		unsigned char i,lpage,lcol;
		unsigned int count = 0;		
		
		lpage = PAGE;
		lcol = COL;
			
		count = strlen(aMsg);
		for(i=0;i<count;i++)
		{			
			LCD_PRINT_2nd_FONT(aMsg[i],PAGE,COL);
		       
			//LCD_SET_PAGE(lpage,lcol);	
		}	
}

void LCD_PRINT_2nd_FONT(unsigned char data,unsigned char Page1, unsigned char Col1)
{
	//unsigned char lpage,lcol;
	unsigned char i,index = 0;	
	index	= data - 32;	

	
	//	LCD_PAGE_COL_CHECK_FONT1();
	
	for(i = 0; i < 6; i++)
	{
		fontsize(ALPHA[index][i],Page1,Col1);
		Col1 = Col1 + 2;
	}
	
}

void fontsize(unsigned char data, unsigned char Page1, unsigned char Col1)
{
	unsigned int x;
	
	vchar.byte = data;
	
	if(vchar.bite.b0 == 1)
	{
		a.bite.b0 = 1; a.bite.b1=1;
	}
	else
	{
	   a.bite.b0 = 0; a.bite.b1=0;
	}	

    if(vchar.bite.b1 == 1)
	{
		a.bite.b2 = 1; a.bite.b3=1;
	}
	else
	{
	   a.bite.b2 = 0; a.bite.b3=0;
	}

    if(vchar.bite.b2 == 1)
	{
		a.bite.b4 = 1; a.bite.b5=1;
	}
	else
	{
	   a.bite.b4 = 0; a.bite.b5=0;
	}	

       if(vchar.bite.b3 == 1)
	{
		a.bite.b6 = 1; a.bite.b7=1;
	}
	else
	{
	   a.bite.b6 = 0; a.bite.b7=0;
	}
	   
	   
	if(vchar.bite.b4 == 1)
	
	{
		b.bite.b0 = 1; b.bite.b1=1;
	}
	else
	{
	   b.bite.b0 = 0; b.bite.b1=0;
	}
	
    if(vchar.bite.b5 == 1)
		{
		b.bite.b2 = 1; b.bite.b3=1;
	}
	else
	{
	   b.bite.b2 = 0; b.bite.b3=0;
	}

    if(vchar.bite.b6 == 1)
		{
		b.bite.b4 = 1; b.bite.b5=1;
	}
	else
	{
	   b.bite.b4 = 0; b.bite.b5=0;
	}	

    if(vchar.bite.b7 == 1)
		{
		b.bite.b6 = 1; b.bite.b7=1;
	}
	else
	{
	   b.bite.b6 = 0; b.bite.b7=0;
	}
	
	for(x=0;x<=2;x++)
	   {
		   {
		          LCD_SET_PAGE(Page1,Col1);
			  LCD_WRITE_DATA(a.byte);
		
		   }
		   {	  
		          LCD_SET_PAGE(Page1+1,Col1);
			  LCD_WRITE_DATA(b.byte);
			  Col1++;
		
		   }
		  
	   }
	   LCD_SET_PAGE(Page1,Col1);

}

void Display_Msg_1stFont1(char* aMsg)
{
		unsigned char i,lpage,lcol;
		unsigned int count = 0;		
		//PAGE    = PAGE1;
		//COL	= COL1;
		//LCD_SET_PAGE(PAGE,COL);		// initial page,col
		
		lpage = PAGE;
		lcol = COL;
			
		count = strlen(aMsg);
		for(i=0;i<count;i++)
		{			
			//LCD_PRINT_2nd_FONT(aMsg[i],PAGE,COL);
			LCD_PRINT_FONT1(aMsg[i]);
		       
			//LCD_SET_PAGE(lpage,lcol);	
		}	
}

void DispImage(unsigned char *Adata)
{
	int row,col,col1,row1=1024;
		for(row=63;row>=0;row--)
		{
			row1=row1-1;
			col1=row1;
			for(col=127;col>=0;col--)
			{	
				LCD_WRITE_DATA(Adata[col1]);
				col1=col1-8;
			}
			PAGE++;
			LCD_WRITE_CMD(PAGE);
			LCD_WRITE_CMD(0x10);
			LCD_WRITE_CMD(0x00);
		}	
}
void doprocessSMF(unsigned char *aSMF)
{


}

void my_pic(const unsigned char (*pic_data)[128])
{
	unsigned int i,j;
	PAGE = 0xB0;
	COL = 0x00;
	LCD_SET_PAGE(PAGE,COL);
	for(j = 0; j < 8; j++)
	{
		for(i = 0; i < 128; i++)
		{
			LCD_WRITE_DATA(pic_data[j][i]);
			delay(200);
		}
		PAGE++;
		COL = 0x00;
		LCD_SET_PAGE(PAGE,COL);
	}
}
